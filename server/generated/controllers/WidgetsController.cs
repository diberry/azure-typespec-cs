// Generated by @typespec/http-server-csharp
// <auto-generated />
#nullable enable

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using DemoService;
using TypeSpec.Http;

namespace DemoService.Controllers
{
    [ApiController]
    public partial class WidgetsController : ControllerBase
    {

        public WidgetsController(IWidgets operations)
        {
            WidgetsImpl = operations;
        }
        internal virtual IWidgets WidgetsImpl { get; }

        ///<summary>
        /// List widgets
        ///</summary>
        [HttpGet]
        [Route("/widgets")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(WidgetList))]
        public virtual async Task<IActionResult> List()
        {
            var result = await WidgetsImpl.ListAsync();
            return Ok(result);
        }

        ///<summary>
        /// Read widgets
        ///</summary>
        [HttpGet]
        [Route("/widgets/{id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Widget))]
        public virtual async Task<IActionResult> Read(string id)
        {
            var result = await WidgetsImpl.ReadAsync(id);
            return Ok(result);
        }

        ///<summary>
        /// Create a widget
        ///</summary>
        [HttpPost]
        [Route("/widgets")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Widget))]
        public virtual async Task<IActionResult> Create(Widget body)
        {
            var result = await WidgetsImpl.CreateAsync(body);
            return Ok(result);
        }

        ///<summary>
        /// Update a widget
        ///</summary>
        [HttpPatch]
        [Route("/widgets/{id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Widget))]
        public virtual async Task<IActionResult> Update(string id, WidgetMergePatchUpdate body)
        {
            var result = await WidgetsImpl.UpdateAsync(id, body);
            return Ok(result);
        }

        ///<summary>
        /// Delete a widget
        ///</summary>
        [HttpDelete]
        [Route("/widgets/{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> Delete(string id)
        {
            await WidgetsImpl.DeleteAsync(id);
            return NoContent();
        }

        ///<summary>
        /// Analyze a widget
        ///</summary>
        [HttpPost]
        [Route("/widgets/{id}/analyze")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(AnalyzeResult))]
        public virtual async Task<IActionResult> Analyze(string id)
        {
            var result = await WidgetsImpl.AnalyzeAsync(id);
            return Ok(result);
        }

    }
}
